git
git add /
git add .
c(1, 2, 3) + c(1, 2)
install.packages("devtools")
x <- seq(0, 5, by=0.01)
#y.upper <- 2*sqrt(x)
#y.lower <- -2*sqrt(x)
y.max <- max(y.upper)
y.min <- min(y.lower)
#plot(c(-2,5), c(y.min, y.max), type="n", xlab="x", ylab="y")
lines(x, y.upper)
lines(x, y.lower)
abline(v=-1)
points(1,0)
#text(1, 0, "focus (1, 0)", pos=4)
#text(-1, y.min, "directrix x = -1", pos=4)
#title("The parabola y^2 = 4*x")
x <- seq(0, 5, by=0.01)
#y.upper <- 2*sqrt(x)
#y.lower <- -2*sqrt(x)
y.max <- max(y.upper)
y.min <- min(y.lower)
plot(c(-2,5), c(y.min, y.max), type="n", xlab="x", ylab="y")
lines(x, y.upper)
lines(x, y.lower)
abline(v=-1)
points(1,0)
#text(1, 0, "focus (1, 0)", pos=4)
#text(-1, y.min, "directrix x = -1", pos=4)
#title("The parabola y^2 = 4*x")
x <- seq(0, 5, by=0.01)
y.upper <- 2*sqrt(x)
y.lower <- -2*sqrt(x)
y.max <- max(y.upper)
y.min <- min(y.lower)
plot(c(-2,5), c(y.min, y.max), type="n", xlab="x", ylab="y")
lines(x, y.upper)
lines(x, y.lower)
abline(v=-1)
points(1,0)
x <- seq(0, 5, by=0.01)
y.upper <- 2*sqrt(x)
y.lower <- -2*sqrt(x)
y.max <- max(y.upper)
y.min <- min(y.lower)
plot(c(-2,5), c(y.min, y.max), type="n", xlab="x", ylab="y")
#lines(x, y.upper)
#lines(x, y.lower)
#abline(v=-1)
#points(1,0)
#text(1, 0, "focus (1, 0)", pos=4)
#text(-1, y.min, "directrix x = -1", pos=4)
#title("The parabola y^2 = 4*x")
lines(x, y.upper)
lines(x, y.lower)
abline(v=-1)
points(1,0)
text(1, 0, "focus (1, 0)", pos=1)
text(1, 0, "focus (1, 0)", pos=2)
text(1, 0, "focus (1, 0)", pos=3)
par(mfrow=c(2,2))
curve(x*sin(x), from=0, to=100, n=1001)
x <- seq(0, 5, by=0.01)
y.upper <- 2*sqrt(x)
y.lower <- -2*sqrt(x)
y.max <- max(y.upper)
y.min <- min(y.lower)
plot(c(-2,5), c(y.min, y.max), type="n", xlab="x", ylab="y")
lines(x, y.upper)
lines(x, y.lower)
abline(v=-1)
points(1,0)
text(1, 0, "focus (1, 0)", pos=4)
text(-1, y.min, "directrix x = -1", pos=4)
title("The parabola y^2 = 4*x")
par(mfrow=c(2,2))
curve(x*sin(x), from=0, to=100, n=1001)
curve(x*sin(x), from=0, to=10, n=1001)
curve(x*sin(x), from=0, to=1, n=1001)
curve(x*sin(x), from=0, to=0.1, n=1001)
x <- seq(0, 5, by=0.01)
y.upper <- 2*sqrt(x)
y.lower <- -2*sqrt(x)
y.max <- max(y.upper)
y.min <- min(y.lower)
plot(c(-2,5), c(y.min, y.max), type="n", xlab="x", ylab="y")
lines(x, y.upper)
lines(x, y.lower)
abline(v=-1)
points(1,0)
text(1, 0, "focus (1, 0)", pos=4)
text(-1, y.min, "directrix x = -1", pos=4)
title("The parabola y^2 = 4*x")
par(mfrow=c(2,2))
curve(x*sin(x), from=0, to=100, n=1001)
curve(x*sin(x), from=0, to=10, n=1001)
curve(x*sin(x), from=0, to=1, n=1001)
curve(x*sin(x), from=0, to=0.1, n=1001)
par(mfrow=c(2,2))
curve(x*sin(x), from=0, to=100, n=1001)
curve(x*sin(x), from=0, to=10, n=1001)
curve(x*sin(x), from=0, to=1, n=1001)
curve(x*sin(x), from=0, to=0.1, n=1001)
curve(x*sin(x), from=0, to=100, n=1001)
plot.new()
par(mfrow=c(2,2))
curve(x*sin(x), from=0, to=100, n=1001)
curve(x*sin(x), from=0, to=10, n=1001)
curve(x*sin(x), from=0, to=1, n=1001)
curve(x*sin(x), from=0, to=0.1, n=1001)
par(mfrow=c(2,2))
curve(x*sin(x), from=0, to=100, n=1001)
curve(x*sin(x), from=0, to=10, n=1001)
curve(x*sin(x), from=0, to=1, n=1001)
curve(x*sin(x), from=0, to=0.1, n=1001)
quad3 <- function(a0, a1, a2) {
if(a2 == 0 && a1 == 0 && a0 == 0) {
roots <- NA
} else if (a2 == 0 && a1 == 0 ) {
roots <- NULL
} else if ( a2 == 0 ) {
roots <- -a0/a1
} else {
discrim <- a1^2 - 4*a2*a0
if (discrim > 0) {
roots <- (-a1 +c(1,-1) * sqrt(a1^2-4*a2*a0))/(2*a2)
} else if (discrim == 0) {
roots <- -a1/(2*a2)
} else {
roots <- NULL
}
}
return(roots)
}
quad3(6,5,1)
warning()
quad3(6,5,1)
quad3(6,-5,1)
quad3(9,-5,1)
quad3(9,-6,1)
install.packages("pryr")
library(pryr)
df <- data.frame(x=1:100, y=letters[1:10])
df
otype(df)
otype(df$x)
otype(df$y)
mean
UseMethod("mean", [1,2])
?UseMethod
sum
[]
[
print
methods("mean")
mean(df)
mean(df$x)
mean(df$y)
mean()
mean(class = "ts")
methods(class = "ts")
foo <- list()
class(foo) <- "foo"
View(quad3)
View(quad3)
View(quad3)
t
t.test
y <- 1
g <- function(x) {
y <- 2
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
y <- 1
g <- function(x) {
y <- 2
cat("Hey\n")
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
methods("t.test")
foo <- structure(list(), class = "foo")
foo
?structure
list()
x = list()
x
x
x + 1
add(x,1)
append(x, 1)
x
x <- append(x, 1)
x
x
foo
foo <- list()
class(foo)
class(foo) <- "ffoo"
foo
class(foo)
inherits(foo, "ffoo")
inherits(foo, "foo")
foo <- function(x){}
foo <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(list(x), class="ffoo")
}
foo("z")
foo("x")
foo(11.1)
?attr
mod <- lm(log(mpg)~log(disp), data=mtcars)
class(mod)
print(mod)
f <- function(x) UseMethod("f")
f
f(1)
f("a")
f.a < function(x) "Class a"
f.a <- function(x) "Class a"
a <- structure(list(), class="a")
class(a)
abc <- structure(list(), class="a")
class(abc)
f(abc)
mean.a <- function(x) "mean a"
mean(abc)
methods(mean)
c <- structure(list(), class ="c")
f.default(c)
f
f.a(c)
f.default <- function(x) "Unknown class"
f(c)
f.default(c)
t.test
getAnywhere(t.test)
getAnywhere(t.ts)
getMethod("t.test")
t.test.default
qqnorm
qqnorm.default
t
t.default
tt <- structure(list(), class = "test")
tt
t(tt)
t(1)
t(1.2)
t([1,2])
t(c(1,2))
iclass <- function(x) {
if (is.object(x)) {
stop("x is not a primitive type", call. = FALSE)
}
c(
if (is.matrix(x)) "matrix",
if (is.array(x) && !is.matrix(x)) "array",
if (is.double(x)) "double",
if (is.integer(x)) "integer",
mode(x)
)
}
iclass(matrix(1:5))
iclass(array(1.5)
)
h <- function(x) {
x <- 10
UseMethod("h")
}
h.character <- function(x) paste("char", x)
h.numeric <- function(x) paste("num", x)
h("a")
h(1)
library(stats4)
# From example(mle)
y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
nLL <- function(lambda) - sum(dpois(y, lambda, log = TRUE))
fit <- mle(nLL, start = list(lambda = 5), nobs = length(y))
# An S4 object
isS4(fit)
fit
methods("print")
ts
ts(1:10, frequency = 4, start = c(1959, 2))
ts
myts <- ts(1:10, frequency = 4, start = c(1959, 2))
myts
class(myts)
methods("Ts")
methods("ts")
setClass(
Class="Trajectories",
representation=representation(
times = "numeric",
traj = "matrix"
)
)
new(Class = "Trajectories")
new(Class = "Trajectories", times=c(1,3,4))
new(Class="Trajectories",times=c(1,3),traj=matrix(1:4,ncol=2))
trajStAnne <- new(
Class= "Trajectories",
times=c(1: 10, (6: 16) *2),
traj=rbind(
matrix (seq (16,19, length=21), ncol=21, nrow=50, byrow=TRUE),
matrix (seq (15.8, 18, length=21), ncol=21, nrow=30, byrow=TRUE)
)+rnorm (21*80,0,0.2)
)
?representation
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
install.packages(c("devtools"))
install.packages(c("git2r"))
install.packages(c("servr", "knitr"), repos = "http://cran.rstudio.com")
num_cases(money = 120, coin = 100)
coin_list = c(500, 100, 50, 10)
num_cases <- function(money, coin){
if (money == coin){
return(1)
} else if (money < coin){
return(0)
} else {
return(sum(sapply(coin_list[coin_list <= coin],
FUN = num_cases,
money = money - coin)))
}
}
num_cases(money = 120, coin = 100)
jekyll(dir = ".", input = c(".", "_source", "_posts"), output = c(".",
"_posts", "_posts"), script = c("Makefile", "build.R"), serve = TRUE,
command = "jekyll build", ...)
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"), output = c(".",
"_posts", "_posts"), script = c("Makefile", "build.R"), serve = TRUE,
command = "jekyll build", ...)
servr::jekyll()
?servr::jekyll
new_post("R markdown")
blog_push()
servr::new_post("R markdown")
servr::blog_push()
install.packages(c("knitr", "servr", "devtools"))
install.packages(c("knitr", "servr", "devtools"))
devtools::install_github("hadley/lubridate")
